/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  User,
  UserAcademicStatusDTO,
  UserFullInfo,
} from '../models/index';
import {
    UserFromJSON,
    UserToJSON,
    UserAcademicStatusDTOFromJSON,
    UserAcademicStatusDTOToJSON,
    UserFullInfoFromJSON,
    UserFullInfoToJSON,
} from '../models/index';

export interface CheckRequest {
    session: string;
}

export interface GetUserRequest {
    session: string;
}

export interface GetUserAcademicStatusRequest {
    session: string;
}

export interface GetUserFullInfoRequest {
    session: string;
}

export interface LoginRequest {
    portalId: string;
    portalPassword: string;
}

export interface LogoutRequest {
    session: string;
}

export interface SyncUserRequest {
    session: string;
    portalId: string;
    portalPassword: string;
}

/**
 * 
 */
export class ControllerApi extends runtime.BaseAPI {

    /**
     */
    async checkRaw(requestParameters: CheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['session'] == null) {
            throw new runtime.RequiredError(
                'session',
                'Required parameter "session" was null or undefined when calling check().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['session'] != null) {
            queryParameters['session'] = requestParameters['session'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async check(requestParameters: CheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.checkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['session'] == null) {
            throw new runtime.RequiredError(
                'session',
                'Required parameter "session" was null or undefined when calling getUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['session'] != null) {
            queryParameters['session'] = requestParameters['session'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserAcademicStatusRaw(requestParameters: GetUserAcademicStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAcademicStatusDTO>> {
        if (requestParameters['session'] == null) {
            throw new runtime.RequiredError(
                'session',
                'Required parameter "session" was null or undefined when calling getUserAcademicStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['session'] != null) {
            queryParameters['session'] = requestParameters['session'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/academic-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAcademicStatusDTOFromJSON(jsonValue));
    }

    /**
     */
    async getUserAcademicStatus(requestParameters: GetUserAcademicStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAcademicStatusDTO> {
        const response = await this.getUserAcademicStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserFullInfoRaw(requestParameters: GetUserFullInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFullInfo>> {
        if (requestParameters['session'] == null) {
            throw new runtime.RequiredError(
                'session',
                'Required parameter "session" was null or undefined when calling getUserFullInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['session'] != null) {
            queryParameters['session'] = requestParameters['session'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/full`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFullInfoFromJSON(jsonValue));
    }

    /**
     */
    async getUserFullInfo(requestParameters: GetUserFullInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFullInfo> {
        const response = await this.getUserFullInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async indexRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async index(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.indexRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['portalId'] == null) {
            throw new runtime.RequiredError(
                'portalId',
                'Required parameter "portalId" was null or undefined when calling login().'
            );
        }

        if (requestParameters['portalPassword'] == null) {
            throw new runtime.RequiredError(
                'portalPassword',
                'Required parameter "portalPassword" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['portalId'] != null) {
            queryParameters['portalId'] = requestParameters['portalId'];
        }

        if (requestParameters['portalPassword'] != null) {
            queryParameters['portalPassword'] = requestParameters['portalPassword'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async logoutRaw(requestParameters: LogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['session'] == null) {
            throw new runtime.RequiredError(
                'session',
                'Required parameter "session" was null or undefined when calling logout().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['session'] != null) {
            queryParameters['session'] = requestParameters['session'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async logout(requestParameters: LogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async syncUserRaw(requestParameters: SyncUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['session'] == null) {
            throw new runtime.RequiredError(
                'session',
                'Required parameter "session" was null or undefined when calling syncUser().'
            );
        }

        if (requestParameters['portalId'] == null) {
            throw new runtime.RequiredError(
                'portalId',
                'Required parameter "portalId" was null or undefined when calling syncUser().'
            );
        }

        if (requestParameters['portalPassword'] == null) {
            throw new runtime.RequiredError(
                'portalPassword',
                'Required parameter "portalPassword" was null or undefined when calling syncUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['session'] != null) {
            queryParameters['session'] = requestParameters['session'];
        }

        if (requestParameters['portalId'] != null) {
            queryParameters['portalId'] = requestParameters['portalId'];
        }

        if (requestParameters['portalPassword'] != null) {
            queryParameters['portalPassword'] = requestParameters['portalPassword'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/sync`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async syncUser(requestParameters: SyncUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.syncUserRaw(requestParameters, initOverrides);
    }

}
